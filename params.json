{"name":"Cchmapclustercontroller","tagline":"High-performance map clustering with MapKit for iOS and OS X. Integrate with 4 lines of code.","body":"CCHMapClusterController\r\n=======================\r\n\r\n[![Build Status](https://travis-ci.org/choefele/CCHMapClusterController.png?branch=master)](https://travis-ci.org/choefele/CCHMapClusterController)\r\n\r\nIf you have your project set up with an `MKMapView`, integrating clustering will take 4 lines of code:\r\n\r\n<pre>\r\n<b>#import \"CCHMapClusterController.h\"</b>\r\n  \r\n@interface ViewController()\r\n\r\n<b>@property (strong, nonatomic) CCHMapClusterController *mapClusterController;</b>\r\n\r\n@end\r\n\r\n- (void)viewDidLoad\r\n{\r\n  [super viewDidLoad]\r\n    \r\n  NSArray annotations = ...\r\n  <b>self.mapClusterController = [[CCHMapClusterController alloc] initWithMapView:self.mapView];\r\n  [self.mapClusterController addAnnotations:annotations withCompletionHandler:NULL];</b>\r\n}\r\n</pre>\r\n\r\n<p align=\"center\" >\r\n  <img src=\"MapClustering.png\" alt=\"Map Clustering\" title=\"Map Clustering\">\r\n</p>\r\n\r\nDon't worry about manually updating the clusters; `CCHMapClusterController` automatically knows when changes have occurred that require the clusters to regroup.\r\n\r\nTo try out the clustering, experiment with the examples included in this project, or download the app “Stolpersteine in Berlin” [![Download on the App Store](https://linkmaker.itunes.apple.com/htmlResources/assets//images/web/linkmaker/badge_appstore-sm.png)](https://itunes.apple.com/de/app/stolpersteine-in-berlin/id640731757?mt=8&uo=4).\r\n\r\n## Installation\r\n\r\nUse [CocoaPods](http://cocoapods.org) to easily integrate `CCHMapClusterController` into your project. Minimum deployment targets are 6.0 for iOS and 10.9 for OS X.\r\n\r\n```ruby\r\nplatform :ios, '6.0'\r\npod \"CCHMapClusterController\"\r\n```\r\n\r\n```ruby\r\nplatform :osx, '10.9'\r\npod \"CCHMapClusterController\"\r\n```\r\n\r\nSee [Changes.md](https://github.com/choefele/CCHMapClusterController/blob/master/CHANGES.md) for a high-level overview of recent updates.\r\n\r\n## Performance\r\n\r\nThe clustering algorithm splits a rectangular area of the map into a grid of square cells. For each cell, a representation for the annotations in this cell is selected and displayed. \r\n\r\nThe quad tree implementation used to gather annotations for a cell is based on [TBQuadTree](https://github.com/thoughtbot/TBAnnotationClustering/blob/master/TBAnnotationClustering/TBQuadTree.h) and is very fast. For this reason, performance is less dependent on the number of clustered annotations, but rather on the number of visible clusters on the map. This number can be configured with the cell size and the margin factor (see below). \r\n\r\nOther factors are the density of the clustered annotations (annotations spread over a large area cluster faster) and the way annotation views are implemented (if possible, use images instead of `drawRect:`).\r\n\r\nThe examples in this project contain two data sets for testing: 5000+ annotations in a small area around Berlin and 80000+ annotations spread over the entire US. Both data sets perform fine on an iPhone 4S.\r\n\r\n## Cell size and margin factor\r\n\r\n`CCHMapClusterController` has a property `cellSize` to configure the size of the cell in points (1 point = 2 pixels on Retina displays). This way, you can select a cell size that is large enough to display map icons with minimal overlap. More likely, however, you will choose the cell size to optimize clustering performance (the larger the size, the better the performance). The actual cell size used for clustering will be adjusted so that the map's width is a multiple of the cell size. This avoids realignment of cells when panning across the 180th meridian.\r\n\r\nThe `marginFactor` property configures the additional map area around the visible area that's included for clustering. This avoids sudden changes at the edges of the visible area when the user pans the map. Ideally, you would set this value to 1.0 (100% additional map area on each side), as this is the maximum scroll area a user can achieve with a panning gesture. However, this affects performance as this will cover 9x the map area for clustering. The default is 0.5 (50% additional area on each side).\r\n\r\nTo debug these settings, set the `debugEnabled` property to `YES`. This will display the clustering grid over the map.\r\n\r\n## Customizing cluster annotations\r\n\r\nCluster annotations are of type `CCHMapClusterAnnotation`. You can customize their titles and subtitles by registering as a `CCHMapClusterControllerDelegate` with `CCHMapClusterController` and implementing two delegate methods.\r\n\r\nIn these methods, `CCHMapClusterAnnotation` gives you access to the annotations contained in the cluster through the property `annotations`. An annotation in this array will always implement `MKAnnotation`, but is otherwise of same type as the instances you added to `CCHMapClusterController` when calling `addAnnotations:withCompletionHandler:`.\r\n\r\nHere is an example:\r\n\r\n```Objective-C\r\n- (NSString *)mapClusterController:(CCHMapClusterController *)mapClusterController titleForMapClusterAnnotation:(CCHMapClusterAnnotation *)mapClusterAnnotation\r\n{\r\n    NSUInteger numAnnotations = mapClusterAnnotation.annotations.count;\r\n    NSString *unit = numAnnotations > 1 ? @\"annotations\" : @\"annotation\";\r\n    return [NSString stringWithFormat:@\"%tu %@\", numAnnotations, unit];\r\n}\r\n\r\n- (NSString *)mapClusterController:(CCHMapClusterController *)mapClusterController subtitleForMapClusterAnnotation:(CCHMapClusterAnnotation *)mapClusterAnnotation\r\n{\r\n    NSUInteger numAnnotations = MIN(mapClusterAnnotation.annotations.count, 5);\r\n    NSArray *annotations = [mapClusterAnnotation.annotations.allObjects subarrayWithRange:NSMakeRange(0, numAnnotations)];\r\n    NSArray *titles = [annotations valueForKey:@\"title\"];\r\n    return [titles componentsJoinedByString:@\", \"];\r\n}\r\n```\r\n\r\nCustomizing the look of clustered annotations is possible via the standard `mapView:viewForAnnotation:` method that's part of `MKMapViewDelegate`. In addition, the delegate method `mapClusterController:willReuseMapClusterAnnotation:` is called when a cluster annotation is reused for a cell (see property `reuseExistingClusterAnnotations` below). The iOS example contains code that demonstrates how to display the current cluster size as part of the annotation view.\r\n\r\n## Positioning cluster annotations\r\n\r\nFor aesthetic reasons, cluster annotations are not lined up evenly as this would make the underlying grid obvious. This library comes with two implementations to configure the position of cluster annotations:\r\n\r\n- `CCHCenterOfMassMapClusterer` (default): computes the average of the coordinates of all annotations in a cluster\r\n- `CCHNearCenterMapClusterer`: uses the position of the annotation in a cluster that's closest to the center\r\n\r\nInstances of these classes can be assigned to `CCHMapClusterController`'s property `clusterer`. By implementing the protocol `CCHMapClusterer`, you can provide your own strategy for positioning cluster annotations.\r\n\r\nIn addition, `CCHMapClusterController` by default reuses cluster annotations for a cell. This is beneficial for incrementally adding more annotations to the clustering (e.g. when downloading batches of data) because you want to avoid the cluster annotation jumping around during updates. Set `reuseExistingClusterAnnotations` to `NO` if you don't want this behavior.\r\n\r\n## Animations\r\n\r\nBy default, annotation views for cluster annotations receive an animation that fades the view in when added and out when removed (`CCHFadeInOutAnimator`). You can provide your own animation code by implementing the protocol `CCHMapAnimator` and changing `CCHMapClusterController`'s property `animator`.\r\n\r\n## Finding a clustered annotation\r\n\r\nA common use case is to have a search field where the user can make a choice from a list of matching annotations. Selecting an annotation would then zoom to its position on the map.\r\n\r\nFor this to work, you have to figure out which cluster contains the selected annotation. In addition, the clustering changes while zooming thus requiring an incremental approach to finding the cluster that contains the annotation the user is looking for.\r\n\r\n`CCHMapClusterController` contains an easy to use interface to help you with this:\r\n\r\n```Objective-C\r\n[self.mapClusterController selectAnnotation:annotation \r\n       andZoomToRegionWithLatitudinalMeters:1000 \r\n                         longitudinalMeters:1000];\r\n``` \r\n\r\n## License (MIT)\r\n\r\nCopyright (C) 2013 Claus Höfele\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}